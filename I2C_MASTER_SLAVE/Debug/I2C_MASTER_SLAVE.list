
I2C_MASTER_SLAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000478  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800060c  0800060c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800060c  0800060c  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  0800060c  0800060c  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800060c  0800060c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800060c  0800060c  0001060c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000610  08000610  00010610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08000614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000024  08000638  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08000638  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000059f  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001c5  00000000  00000000  00020636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000090  00000000  00000000  00020800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000064  00000000  00000000  00020890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001a9a  00000000  00000000  000208f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000770  00000000  00000000  0002238e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00007655  00000000  00000000  00022afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000188  00000000  00000000  0002a154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0002a2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000024 	.word	0x20000024
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080005f4 	.word	0x080005f4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000028 	.word	0x20000028
 80001d0:	080005f4 	.word	0x080005f4

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <get_len_of_data>:
void GPIO_Config(void);
void I2C_Config(void);
void NVIC_EnableIRQ(uint8_t IRQNumber);
void NVIC_Config(void);

uint8_t get_len_of_data(void) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
    return (uint8_t)strlen(name_msg);
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <get_len_of_data+0x14>)
 80001ea:	f7ff fff3 	bl	80001d4 <strlen>
 80001ee:	4603      	mov	r3, r0
 80001f0:	b2db      	uxtb	r3, r3
}
 80001f2:	4618      	mov	r0, r3
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	20000000 	.word	0x20000000

080001fc <delay>:

void delay(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 1000000; i++);
 8000202:	2300      	movs	r3, #0
 8000204:	607b      	str	r3, [r7, #4]
 8000206:	e002      	b.n	800020e <delay+0x12>
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	3301      	adds	r3, #1
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	4a04      	ldr	r2, [pc, #16]	; (8000224 <delay+0x28>)
 8000212:	4293      	cmp	r3, r2
 8000214:	d9f8      	bls.n	8000208 <delay+0xc>
}
 8000216:	bf00      	nop
 8000218:	bf00      	nop
 800021a:	370c      	adds	r7, #12
 800021c:	46bd      	mov	sp, r7
 800021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000222:	4770      	bx	lr
 8000224:	000f423f 	.word	0x000f423f

08000228 <main>:


int main(void) {
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
    Clock_Config();
 800022c:	f000 f81c 	bl	8000268 <Clock_Config>
    GPIO_Config();
 8000230:	f000 f854 	bl	80002dc <GPIO_Config>
    I2C_Config();
 8000234:	f000 f88e 	bl	8000354 <I2C_Config>
    NVIC_Config();
 8000238:	f000 f8fa 	bl	8000430 <NVIC_Config>

    // blink led to say that config is OKAY
    LED = 1;
 800023c:	4a09      	ldr	r2, [pc, #36]	; (8000264 <main+0x3c>)
 800023e:	6813      	ldr	r3, [r2, #0]
 8000240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000244:	6013      	str	r3, [r2, #0]
	delay();
 8000246:	f7ff ffd9 	bl	80001fc <delay>
	LED = 0;
 800024a:	4a06      	ldr	r2, [pc, #24]	; (8000264 <main+0x3c>)
 800024c:	6813      	ldr	r3, [r2, #0]
 800024e:	f36f 2308 	bfc	r3, #8, #1
 8000252:	6013      	str	r3, [r2, #0]
	delay();
 8000254:	f7ff ffd2 	bl	80001fc <delay>
	 LED = 1;
 8000258:	4a02      	ldr	r2, [pc, #8]	; (8000264 <main+0x3c>)
 800025a:	6813      	ldr	r3, [r2, #0]
 800025c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000260:	6013      	str	r3, [r2, #0]



    while (1)
 8000262:	e7fe      	b.n	8000262 <main+0x3a>
 8000264:	40020014 	.word	0x40020014

08000268 <Clock_Config>:
 * FUNCTIONS
 */



void Clock_Config(void) {
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
    // Enable HSI (internal high speed clock)
    RCC->CR |= RCC_CR_HSION;
 800026c:	4b1a      	ldr	r3, [pc, #104]	; (80002d8 <Clock_Config+0x70>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a19      	ldr	r2, [pc, #100]	; (80002d8 <Clock_Config+0x70>)
 8000272:	f043 0301 	orr.w	r3, r3, #1
 8000276:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSIRDY)); // Wait for HSI to be ready
 8000278:	bf00      	nop
 800027a:	4b17      	ldr	r3, [pc, #92]	; (80002d8 <Clock_Config+0x70>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f003 0302 	and.w	r3, r3, #2
 8000282:	2b00      	cmp	r3, #0
 8000284:	d0f9      	beq.n	800027a <Clock_Config+0x12>

    // Select HSI as system clock source
    RCC->CFGR &= ~RCC_CFGR_SW; // clear
 8000286:	4b14      	ldr	r3, [pc, #80]	; (80002d8 <Clock_Config+0x70>)
 8000288:	689b      	ldr	r3, [r3, #8]
 800028a:	4a13      	ldr	r2, [pc, #76]	; (80002d8 <Clock_Config+0x70>)
 800028c:	f023 0303 	bic.w	r3, r3, #3
 8000290:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_HSI; // set
 8000292:	4b11      	ldr	r3, [pc, #68]	; (80002d8 <Clock_Config+0x70>)
 8000294:	4a10      	ldr	r2, [pc, #64]	; (80002d8 <Clock_Config+0x70>)
 8000296:	689b      	ldr	r3, [r3, #8]
 8000298:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI); // Wait till HSI is used as system clock source
 800029a:	bf00      	nop
 800029c:	4b0e      	ldr	r3, [pc, #56]	; (80002d8 <Clock_Config+0x70>)
 800029e:	689b      	ldr	r3, [r3, #8]
 80002a0:	f003 030c 	and.w	r3, r3, #12
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d1f9      	bne.n	800029c <Clock_Config+0x34>

    // Enable clocks for GPIOB and I2C1
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002a8:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <Clock_Config+0x70>)
 80002aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ac:	4a0a      	ldr	r2, [pc, #40]	; (80002d8 <Clock_Config+0x70>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80002b4:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <Clock_Config+0x70>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b8:	4a07      	ldr	r2, [pc, #28]	; (80002d8 <Clock_Config+0x70>)
 80002ba:	f043 0302 	orr.w	r3, r3, #2
 80002be:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <Clock_Config+0x70>)
 80002c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002c4:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <Clock_Config+0x70>)
 80002c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002ca:	6413      	str	r3, [r2, #64]	; 0x40
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40023800 	.word	0x40023800

080002dc <GPIO_Config>:


void GPIO_Config(void) {
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
    // Configure PB6 and PB7 as alternate function I2C1
    GPIOB->MODER &= ~(0xF << (6 * 2)); // Clear mode for PB6 and PB7
 80002e0:	4b1a      	ldr	r3, [pc, #104]	; (800034c <GPIO_Config+0x70>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a19      	ldr	r2, [pc, #100]	; (800034c <GPIO_Config+0x70>)
 80002e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80002ea:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (0xA << (6 * 2));  // Set PB6 and PB7 to alternate function
 80002ec:	4b17      	ldr	r3, [pc, #92]	; (800034c <GPIO_Config+0x70>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a16      	ldr	r2, [pc, #88]	; (800034c <GPIO_Config+0x70>)
 80002f2:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 80002f6:	6013      	str	r3, [r2, #0]

    GPIOB->OTYPER |= (0x3 << 6);       // Set output type to open-drain for PB6 and PB7
 80002f8:	4b14      	ldr	r3, [pc, #80]	; (800034c <GPIO_Config+0x70>)
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	4a13      	ldr	r2, [pc, #76]	; (800034c <GPIO_Config+0x70>)
 80002fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000302:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (0xF << (6 * 2));// Set speed to very high for PB6 and PB7
 8000304:	4b11      	ldr	r3, [pc, #68]	; (800034c <GPIO_Config+0x70>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	4a10      	ldr	r2, [pc, #64]	; (800034c <GPIO_Config+0x70>)
 800030a:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 800030e:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(0xF << (6 * 2)); // No pull-up/pull-down for PB6 and PB7
 8000310:	4b0e      	ldr	r3, [pc, #56]	; (800034c <GPIO_Config+0x70>)
 8000312:	68db      	ldr	r3, [r3, #12]
 8000314:	4a0d      	ldr	r2, [pc, #52]	; (800034c <GPIO_Config+0x70>)
 8000316:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800031a:	60d3      	str	r3, [r2, #12]

    GPIOB->AFR[0] |= (0x44 << (6 * 4)); // Set alternate function to I2C1 for PB6 and PB7
 800031c:	4b0b      	ldr	r3, [pc, #44]	; (800034c <GPIO_Config+0x70>)
 800031e:	6a1b      	ldr	r3, [r3, #32]
 8000320:	4a0a      	ldr	r2, [pc, #40]	; (800034c <GPIO_Config+0x70>)
 8000322:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 8000326:	6213      	str	r3, [r2, #32]

    // Confifure PA6 as led output
    GPIOA->MODER &= ~(1 << 16);
 8000328:	4b09      	ldr	r3, [pc, #36]	; (8000350 <GPIO_Config+0x74>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a08      	ldr	r2, [pc, #32]	; (8000350 <GPIO_Config+0x74>)
 800032e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000332:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (1 << 16);
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <GPIO_Config+0x74>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a05      	ldr	r2, [pc, #20]	; (8000350 <GPIO_Config+0x74>)
 800033a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800033e:	6013      	str	r3, [r2, #0]
}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	40020400 	.word	0x40020400
 8000350:	40020000 	.word	0x40020000

08000354 <I2C_Config>:


void I2C_Config(void) {
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
    I2C1->CR1 &= ~I2C_CR1_PE; // Disable I2C1
 8000358:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <I2C_Config+0x50>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a11      	ldr	r2, [pc, #68]	; (80003a4 <I2C_Config+0x50>)
 800035e:	f023 0301 	bic.w	r3, r3, #1
 8000362:	6013      	str	r3, [r2, #0]
    I2C1->CR2 = 16;           // APB1 clock frequency in MHz (set to 16 MHz)
 8000364:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <I2C_Config+0x50>)
 8000366:	2210      	movs	r2, #16
 8000368:	605a      	str	r2, [r3, #4]
    I2C1->OAR1 = I2C_OAR1_OA1EN | (SLAVE_ADDR << 1); // Set slave address and enable it
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <I2C_Config+0x50>)
 800036c:	f244 02d0 	movw	r2, #16592	; 0x40d0
 8000370:	609a      	str	r2, [r3, #8]
    //I2C1->OAR1 = (SLAVE_ADDR << 1); // Set slave address
    I2C1->CCR = 80;           // Configure clock control (standard mode, 100 kHz), consindering 16MHz system clock
 8000372:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <I2C_Config+0x50>)
 8000374:	2250      	movs	r2, #80	; 0x50
 8000376:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 17;         // Configure maximum rise time
 8000378:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <I2C_Config+0x50>)
 800037a:	2211      	movs	r2, #17
 800037c:	621a      	str	r2, [r3, #32]

    // Enable ACK, I2C peripheral, and interrupts
    I2C1->CR1 |= I2C_CR1_ACK | I2C_CR1_PE;
 800037e:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <I2C_Config+0x50>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a08      	ldr	r2, [pc, #32]	; (80003a4 <I2C_Config+0x50>)
 8000384:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000388:	f043 0301 	orr.w	r3, r3, #1
 800038c:	6013      	str	r3, [r2, #0]
    I2C1->CR2 |= I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN | I2C_CR2_ITERREN;
 800038e:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <I2C_Config+0x50>)
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	4a04      	ldr	r2, [pc, #16]	; (80003a4 <I2C_Config+0x50>)
 8000394:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000398:	6053      	str	r3, [r2, #4]
}
 800039a:	bf00      	nop
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr
 80003a4:	40005400 	.word	0x40005400

080003a8 <NVIC_EnableIRQ>:

void NVIC_EnableIRQ(uint8_t IRQNumber)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	71fb      	strb	r3, [r7, #7]
	if(IRQNumber <= 31)
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	2b1f      	cmp	r3, #31
 80003b6:	d80a      	bhi.n	80003ce <NVIC_EnableIRQ+0x26>
	{
		// program ISER0 register
		*NVIC_ISER0 |= (1 << IRQNumber);
 80003b8:	4b1a      	ldr	r3, [pc, #104]	; (8000424 <NVIC_EnableIRQ+0x7c>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	79fa      	ldrb	r2, [r7, #7]
 80003be:	2101      	movs	r1, #1
 80003c0:	fa01 f202 	lsl.w	r2, r1, r2
 80003c4:	4611      	mov	r1, r2
 80003c6:	4a17      	ldr	r2, [pc, #92]	; (8000424 <NVIC_EnableIRQ+0x7c>)
 80003c8:	430b      	orrs	r3, r1
 80003ca:	6013      	str	r3, [r2, #0]
	{
		// program ISER2 register
		*NVIC_ISER2 |= (1 << (IRQNumber % 64));

	}
}
 80003cc:	e024      	b.n	8000418 <NVIC_EnableIRQ+0x70>
	}else if(IRQNumber > 31 && IRQNumber < 64) // 32 to 63
 80003ce:	79fb      	ldrb	r3, [r7, #7]
 80003d0:	2b1f      	cmp	r3, #31
 80003d2:	d90f      	bls.n	80003f4 <NVIC_EnableIRQ+0x4c>
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	2b3f      	cmp	r3, #63	; 0x3f
 80003d8:	d80c      	bhi.n	80003f4 <NVIC_EnableIRQ+0x4c>
		*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 80003da:	4b13      	ldr	r3, [pc, #76]	; (8000428 <NVIC_EnableIRQ+0x80>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	79fa      	ldrb	r2, [r7, #7]
 80003e0:	f002 021f 	and.w	r2, r2, #31
 80003e4:	2101      	movs	r1, #1
 80003e6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ea:	4611      	mov	r1, r2
 80003ec:	4a0e      	ldr	r2, [pc, #56]	; (8000428 <NVIC_EnableIRQ+0x80>)
 80003ee:	430b      	orrs	r3, r1
 80003f0:	6013      	str	r3, [r2, #0]
}
 80003f2:	e011      	b.n	8000418 <NVIC_EnableIRQ+0x70>
	}else if(IRQNumber >= 64 && IRQNumber < 96) // 64 to 95
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	2b3f      	cmp	r3, #63	; 0x3f
 80003f8:	d90e      	bls.n	8000418 <NVIC_EnableIRQ+0x70>
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	2b5f      	cmp	r3, #95	; 0x5f
 80003fe:	d80b      	bhi.n	8000418 <NVIC_EnableIRQ+0x70>
		*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000400:	4b0a      	ldr	r3, [pc, #40]	; (800042c <NVIC_EnableIRQ+0x84>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	79fa      	ldrb	r2, [r7, #7]
 8000406:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800040a:	2101      	movs	r1, #1
 800040c:	fa01 f202 	lsl.w	r2, r1, r2
 8000410:	4611      	mov	r1, r2
 8000412:	4a06      	ldr	r2, [pc, #24]	; (800042c <NVIC_EnableIRQ+0x84>)
 8000414:	430b      	orrs	r3, r1
 8000416:	6013      	str	r3, [r2, #0]
}
 8000418:	bf00      	nop
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr
 8000424:	e000e100 	.word	0xe000e100
 8000428:	e000e104 	.word	0xe000e104
 800042c:	e000e108 	.word	0xe000e108

08000430 <NVIC_Config>:

void NVIC_Config(void) {
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	// priority will be default
    NVIC_EnableIRQ(IRQ_NO_I2C1_EV); // Enable I2C1 event interrupt
 8000434:	201f      	movs	r0, #31
 8000436:	f7ff ffb7 	bl	80003a8 <NVIC_EnableIRQ>
    NVIC_EnableIRQ(IRQ_NO_I2C1_ER); // Enable I2C1 error interrupt
 800043a:	2020      	movs	r0, #32
 800043c:	f7ff ffb4 	bl	80003a8 <NVIC_EnableIRQ>
}
 8000440:	bf00      	nop
 8000442:	bd80      	pop	{r7, pc}

08000444 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void) {
 8000444:	b590      	push	{r4, r7, lr}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
    if ((I2C1->SR1 & I2C_SR1_ADDR) == I2C_SR1_ADDR) {
 800044a:	4b27      	ldr	r3, [pc, #156]	; (80004e8 <I2C1_EV_IRQHandler+0xa4>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	f003 0302 	and.w	r3, r3, #2
 8000452:	2b02      	cmp	r3, #2
 8000454:	d105      	bne.n	8000462 <I2C1_EV_IRQHandler+0x1e>
        uint32_t temp = I2C1->SR1;
 8000456:	4b24      	ldr	r3, [pc, #144]	; (80004e8 <I2C1_EV_IRQHandler+0xa4>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	607b      	str	r3, [r7, #4]
        temp = I2C1->SR2; // Clear ADDR flag
 800045c:	4b22      	ldr	r3, [pc, #136]	; (80004e8 <I2C1_EV_IRQHandler+0xa4>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	607b      	str	r3, [r7, #4]
        (void)temp;      // Prevent unused variable warning
    }

    if ((I2C1->SR1 & I2C_SR1_RXNE) == I2C_SR1_RXNE) {
 8000462:	4b21      	ldr	r3, [pc, #132]	; (80004e8 <I2C1_EV_IRQHandler+0xa4>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800046a:	2b40      	cmp	r3, #64	; 0x40
 800046c:	d104      	bne.n	8000478 <I2C1_EV_IRQHandler+0x34>
        active_command = I2C1->DR;
 800046e:	4b1e      	ldr	r3, [pc, #120]	; (80004e8 <I2C1_EV_IRQHandler+0xa4>)
 8000470:	691b      	ldr	r3, [r3, #16]
 8000472:	b2da      	uxtb	r2, r3
 8000474:	4b1d      	ldr	r3, [pc, #116]	; (80004ec <I2C1_EV_IRQHandler+0xa8>)
 8000476:	701a      	strb	r2, [r3, #0]
    }

    if ((I2C1->SR1 & I2C_SR1_TXE) == I2C_SR1_TXE) {
 8000478:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <I2C1_EV_IRQHandler+0xa4>)
 800047a:	695b      	ldr	r3, [r3, #20]
 800047c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000480:	2b80      	cmp	r3, #128	; 0x80
 8000482:	d12c      	bne.n	80004de <I2C1_EV_IRQHandler+0x9a>
        if (active_command == 0x51)
 8000484:	4b19      	ldr	r3, [pc, #100]	; (80004ec <I2C1_EV_IRQHandler+0xa8>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b51      	cmp	r3, #81	; 0x51
 800048a:	d10a      	bne.n	80004a2 <I2C1_EV_IRQHandler+0x5e>
        {
            uint8_t len = get_len_of_data();
 800048c:	f7ff feaa 	bl	80001e4 <get_len_of_data>
 8000490:	4603      	mov	r3, r0
 8000492:	70fb      	strb	r3, [r7, #3]
            I2C1->DR = len;
 8000494:	4a14      	ldr	r2, [pc, #80]	; (80004e8 <I2C1_EV_IRQHandler+0xa4>)
 8000496:	78fb      	ldrb	r3, [r7, #3]
 8000498:	6113      	str	r3, [r2, #16]
            active_command = 0xff;
 800049a:	4b14      	ldr	r3, [pc, #80]	; (80004ec <I2C1_EV_IRQHandler+0xa8>)
 800049c:	22ff      	movs	r2, #255	; 0xff
 800049e:	701a      	strb	r2, [r3, #0]
                index = 0;
                active_command = 0xff;
            }
        }
    }
}
 80004a0:	e01d      	b.n	80004de <I2C1_EV_IRQHandler+0x9a>
        } else if (active_command == 0x52)
 80004a2:	4b12      	ldr	r3, [pc, #72]	; (80004ec <I2C1_EV_IRQHandler+0xa8>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b52      	cmp	r3, #82	; 0x52
 80004a8:	d119      	bne.n	80004de <I2C1_EV_IRQHandler+0x9a>
            I2C1->DR = name_msg[index++];
 80004aa:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <I2C1_EV_IRQHandler+0xac>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	1c5a      	adds	r2, r3, #1
 80004b0:	b2d1      	uxtb	r1, r2
 80004b2:	4a0f      	ldr	r2, [pc, #60]	; (80004f0 <I2C1_EV_IRQHandler+0xac>)
 80004b4:	7011      	strb	r1, [r2, #0]
 80004b6:	461a      	mov	r2, r3
 80004b8:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <I2C1_EV_IRQHandler+0xb0>)
 80004ba:	5c9a      	ldrb	r2, [r3, r2]
 80004bc:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <I2C1_EV_IRQHandler+0xa4>)
 80004be:	611a      	str	r2, [r3, #16]
            if (index >= strlen(name_msg))
 80004c0:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <I2C1_EV_IRQHandler+0xac>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	461c      	mov	r4, r3
 80004c6:	480b      	ldr	r0, [pc, #44]	; (80004f4 <I2C1_EV_IRQHandler+0xb0>)
 80004c8:	f7ff fe84 	bl	80001d4 <strlen>
 80004cc:	4603      	mov	r3, r0
 80004ce:	429c      	cmp	r4, r3
 80004d0:	d305      	bcc.n	80004de <I2C1_EV_IRQHandler+0x9a>
                index = 0;
 80004d2:	4b07      	ldr	r3, [pc, #28]	; (80004f0 <I2C1_EV_IRQHandler+0xac>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	701a      	strb	r2, [r3, #0]
                active_command = 0xff;
 80004d8:	4b04      	ldr	r3, [pc, #16]	; (80004ec <I2C1_EV_IRQHandler+0xa8>)
 80004da:	22ff      	movs	r2, #255	; 0xff
 80004dc:	701a      	strb	r2, [r3, #0]
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd90      	pop	{r4, r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40005400 	.word	0x40005400
 80004ec:	20000020 	.word	0x20000020
 80004f0:	20000040 	.word	0x20000040
 80004f4:	20000000 	.word	0x20000000

080004f8 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void) {
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

    if ((I2C1->SR1 & I2C_SR1_AF) == I2C_SR1_AF) {
 80004fc:	4b15      	ldr	r3, [pc, #84]	; (8000554 <I2C1_ER_IRQHandler+0x5c>)
 80004fe:	695b      	ldr	r3, [r3, #20]
 8000500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000508:	d105      	bne.n	8000516 <I2C1_ER_IRQHandler+0x1e>
        I2C1->SR1 &= ~I2C_SR1_AF; // Clear acknowledge failure flag
 800050a:	4b12      	ldr	r3, [pc, #72]	; (8000554 <I2C1_ER_IRQHandler+0x5c>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	4a11      	ldr	r2, [pc, #68]	; (8000554 <I2C1_ER_IRQHandler+0x5c>)
 8000510:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000514:	6153      	str	r3, [r2, #20]
    }


    if ((I2C1->SR1 & I2C_SR1_OVR) == I2C_SR1_OVR) {
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <I2C1_ER_IRQHandler+0x5c>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800051e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000522:	d105      	bne.n	8000530 <I2C1_ER_IRQHandler+0x38>
        I2C1->SR1 &= ~I2C_SR1_OVR; // Clear overrun/underrun flag
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <I2C1_ER_IRQHandler+0x5c>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <I2C1_ER_IRQHandler+0x5c>)
 800052a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800052e:	6153      	str	r3, [r2, #20]
    }

    if ((I2C1->SR1 & I2C_SR1_BERR) == I2C_SR1_BERR) {
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <I2C1_ER_IRQHandler+0x5c>)
 8000532:	695b      	ldr	r3, [r3, #20]
 8000534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800053c:	d105      	bne.n	800054a <I2C1_ER_IRQHandler+0x52>
        I2C1->SR1 &= ~I2C_SR1_BERR; // Clear bus error flag
 800053e:	4b05      	ldr	r3, [pc, #20]	; (8000554 <I2C1_ER_IRQHandler+0x5c>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	4a04      	ldr	r2, [pc, #16]	; (8000554 <I2C1_ER_IRQHandler+0x5c>)
 8000544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000548:	6153      	str	r3, [r2, #20]
    }
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	40005400 	.word	0x40005400

08000558 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000558:	480d      	ldr	r0, [pc, #52]	; (8000590 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800055a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800055c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000560:	480c      	ldr	r0, [pc, #48]	; (8000594 <LoopForever+0x6>)
  ldr r1, =_edata
 8000562:	490d      	ldr	r1, [pc, #52]	; (8000598 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000564:	4a0d      	ldr	r2, [pc, #52]	; (800059c <LoopForever+0xe>)
  movs r3, #0
 8000566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000568:	e002      	b.n	8000570 <LoopCopyDataInit>

0800056a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800056a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800056c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800056e:	3304      	adds	r3, #4

08000570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000574:	d3f9      	bcc.n	800056a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000576:	4a0a      	ldr	r2, [pc, #40]	; (80005a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000578:	4c0a      	ldr	r4, [pc, #40]	; (80005a4 <LoopForever+0x16>)
  movs r3, #0
 800057a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800057c:	e001      	b.n	8000582 <LoopFillZerobss>

0800057e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800057e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000580:	3204      	adds	r2, #4

08000582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000584:	d3fb      	bcc.n	800057e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000586:	f000 f811 	bl	80005ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800058a:	f7ff fe4d 	bl	8000228 <main>

0800058e <LoopForever>:

LoopForever:
  b LoopForever
 800058e:	e7fe      	b.n	800058e <LoopForever>
  ldr   r0, =_estack
 8000590:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000598:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800059c:	08000614 	.word	0x08000614
  ldr r2, =_sbss
 80005a0:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80005a4:	20000044 	.word	0x20000044

080005a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a8:	e7fe      	b.n	80005a8 <ADC_IRQHandler>
	...

080005ac <__libc_init_array>:
 80005ac:	b570      	push	{r4, r5, r6, lr}
 80005ae:	4d0d      	ldr	r5, [pc, #52]	; (80005e4 <__libc_init_array+0x38>)
 80005b0:	4c0d      	ldr	r4, [pc, #52]	; (80005e8 <__libc_init_array+0x3c>)
 80005b2:	1b64      	subs	r4, r4, r5
 80005b4:	10a4      	asrs	r4, r4, #2
 80005b6:	2600      	movs	r6, #0
 80005b8:	42a6      	cmp	r6, r4
 80005ba:	d109      	bne.n	80005d0 <__libc_init_array+0x24>
 80005bc:	4d0b      	ldr	r5, [pc, #44]	; (80005ec <__libc_init_array+0x40>)
 80005be:	4c0c      	ldr	r4, [pc, #48]	; (80005f0 <__libc_init_array+0x44>)
 80005c0:	f000 f818 	bl	80005f4 <_init>
 80005c4:	1b64      	subs	r4, r4, r5
 80005c6:	10a4      	asrs	r4, r4, #2
 80005c8:	2600      	movs	r6, #0
 80005ca:	42a6      	cmp	r6, r4
 80005cc:	d105      	bne.n	80005da <__libc_init_array+0x2e>
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005d4:	4798      	blx	r3
 80005d6:	3601      	adds	r6, #1
 80005d8:	e7ee      	b.n	80005b8 <__libc_init_array+0xc>
 80005da:	f855 3b04 	ldr.w	r3, [r5], #4
 80005de:	4798      	blx	r3
 80005e0:	3601      	adds	r6, #1
 80005e2:	e7f2      	b.n	80005ca <__libc_init_array+0x1e>
 80005e4:	0800060c 	.word	0x0800060c
 80005e8:	0800060c 	.word	0x0800060c
 80005ec:	0800060c 	.word	0x0800060c
 80005f0:	08000610 	.word	0x08000610

080005f4 <_init>:
 80005f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f6:	bf00      	nop
 80005f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005fa:	bc08      	pop	{r3}
 80005fc:	469e      	mov	lr, r3
 80005fe:	4770      	bx	lr

08000600 <_fini>:
 8000600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000602:	bf00      	nop
 8000604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000606:	bc08      	pop	{r3}
 8000608:	469e      	mov	lr, r3
 800060a:	4770      	bx	lr
