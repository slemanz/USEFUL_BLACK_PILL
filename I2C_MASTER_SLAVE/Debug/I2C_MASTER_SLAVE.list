
I2C_MASTER_SLAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000044c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005e0  080005e0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005e0  080005e0  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080005e0  080005e0  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005e0  080005e0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005e0  080005e0  000105e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005e4  080005e4  000105e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080005e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000024  0800060c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  0800060c  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000059f  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001c5  00000000  00000000  00020636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000090  00000000  00000000  00020800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000064  00000000  00000000  00020890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001aa7  00000000  00000000  000208f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000076b  00000000  00000000  0002239b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00007682  00000000  00000000  00022b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000188  00000000  00000000  0002a188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0002a310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000024 	.word	0x20000024
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080005c8 	.word	0x080005c8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000028 	.word	0x20000028
 80001d0:	080005c8 	.word	0x080005c8

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <get_len_of_data>:
void GPIO_Config(void);
void I2C_Config(void);
void NVIC_EnableIRQ(uint8_t IRQNumber);
void NVIC_Config(void);

uint8_t get_len_of_data(void) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
    return (uint8_t)strlen(name_msg);
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <get_len_of_data+0x14>)
 80001ea:	f7ff fff3 	bl	80001d4 <strlen>
 80001ee:	4603      	mov	r3, r0
 80001f0:	b2db      	uxtb	r3, r3
}
 80001f2:	4618      	mov	r0, r3
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	20000000 	.word	0x20000000

080001fc <main>:
{
	for(uint32_t i = 0; i < 1000000; i++);
}


int main(void) {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
    Clock_Config();
 8000200:	f000 f80e 	bl	8000220 <Clock_Config>
    GPIO_Config();
 8000204:	f000 f846 	bl	8000294 <GPIO_Config>
    I2C_Config();
 8000208:	f000 f880 	bl	800030c <I2C_Config>
    NVIC_Config();
 800020c:	f000 f8ec 	bl	80003e8 <NVIC_Config>

    // blink led to say that config is OKAY
    LED = 1;
 8000210:	4a02      	ldr	r2, [pc, #8]	; (800021c <main+0x20>)
 8000212:	6813      	ldr	r3, [r2, #0]
 8000214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000218:	6013      	str	r3, [r2, #0]




    while (1)
 800021a:	e7fe      	b.n	800021a <main+0x1e>
 800021c:	40020014 	.word	0x40020014

08000220 <Clock_Config>:
 * FUNCTIONS
 */



void Clock_Config(void) {
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
    // Enable HSI (internal high speed clock)
    RCC->CR |= RCC_CR_HSION;
 8000224:	4b1a      	ldr	r3, [pc, #104]	; (8000290 <Clock_Config+0x70>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a19      	ldr	r2, [pc, #100]	; (8000290 <Clock_Config+0x70>)
 800022a:	f043 0301 	orr.w	r3, r3, #1
 800022e:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSIRDY)); // Wait for HSI to be ready
 8000230:	bf00      	nop
 8000232:	4b17      	ldr	r3, [pc, #92]	; (8000290 <Clock_Config+0x70>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f003 0302 	and.w	r3, r3, #2
 800023a:	2b00      	cmp	r3, #0
 800023c:	d0f9      	beq.n	8000232 <Clock_Config+0x12>

    // Select HSI as system clock source
    RCC->CFGR &= ~RCC_CFGR_SW; // clear
 800023e:	4b14      	ldr	r3, [pc, #80]	; (8000290 <Clock_Config+0x70>)
 8000240:	689b      	ldr	r3, [r3, #8]
 8000242:	4a13      	ldr	r2, [pc, #76]	; (8000290 <Clock_Config+0x70>)
 8000244:	f023 0303 	bic.w	r3, r3, #3
 8000248:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_HSI; // set
 800024a:	4b11      	ldr	r3, [pc, #68]	; (8000290 <Clock_Config+0x70>)
 800024c:	4a10      	ldr	r2, [pc, #64]	; (8000290 <Clock_Config+0x70>)
 800024e:	689b      	ldr	r3, [r3, #8]
 8000250:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI); // Wait till HSI is used as system clock source
 8000252:	bf00      	nop
 8000254:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <Clock_Config+0x70>)
 8000256:	689b      	ldr	r3, [r3, #8]
 8000258:	f003 030c 	and.w	r3, r3, #12
 800025c:	2b00      	cmp	r3, #0
 800025e:	d1f9      	bne.n	8000254 <Clock_Config+0x34>

    // Enable clocks for GPIOB and I2C1
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000260:	4b0b      	ldr	r3, [pc, #44]	; (8000290 <Clock_Config+0x70>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000264:	4a0a      	ldr	r2, [pc, #40]	; (8000290 <Clock_Config+0x70>)
 8000266:	f043 0301 	orr.w	r3, r3, #1
 800026a:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800026c:	4b08      	ldr	r3, [pc, #32]	; (8000290 <Clock_Config+0x70>)
 800026e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000270:	4a07      	ldr	r2, [pc, #28]	; (8000290 <Clock_Config+0x70>)
 8000272:	f043 0302 	orr.w	r3, r3, #2
 8000276:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <Clock_Config+0x70>)
 800027a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800027c:	4a04      	ldr	r2, [pc, #16]	; (8000290 <Clock_Config+0x70>)
 800027e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000282:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	40023800 	.word	0x40023800

08000294 <GPIO_Config>:


void GPIO_Config(void) {
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
    // Configure PB6 and PB7 as alternate function I2C1
    GPIOB->MODER &= ~(0xF << (6 * 2)); // Clear mode for PB6 and PB7
 8000298:	4b1a      	ldr	r3, [pc, #104]	; (8000304 <GPIO_Config+0x70>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a19      	ldr	r2, [pc, #100]	; (8000304 <GPIO_Config+0x70>)
 800029e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80002a2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (0xA << (6 * 2));  // Set PB6 and PB7 to alternate function
 80002a4:	4b17      	ldr	r3, [pc, #92]	; (8000304 <GPIO_Config+0x70>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a16      	ldr	r2, [pc, #88]	; (8000304 <GPIO_Config+0x70>)
 80002aa:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 80002ae:	6013      	str	r3, [r2, #0]

    GPIOB->OTYPER |= (0x3 << 6);       // Set output type to open-drain for PB6 and PB7
 80002b0:	4b14      	ldr	r3, [pc, #80]	; (8000304 <GPIO_Config+0x70>)
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	4a13      	ldr	r2, [pc, #76]	; (8000304 <GPIO_Config+0x70>)
 80002b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80002ba:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (0xF << (6 * 2));// Set speed to very high for PB6 and PB7
 80002bc:	4b11      	ldr	r3, [pc, #68]	; (8000304 <GPIO_Config+0x70>)
 80002be:	689b      	ldr	r3, [r3, #8]
 80002c0:	4a10      	ldr	r2, [pc, #64]	; (8000304 <GPIO_Config+0x70>)
 80002c2:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80002c6:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(0xF << (6 * 2)); // No pull-up/pull-down for PB6 and PB7
 80002c8:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <GPIO_Config+0x70>)
 80002ca:	68db      	ldr	r3, [r3, #12]
 80002cc:	4a0d      	ldr	r2, [pc, #52]	; (8000304 <GPIO_Config+0x70>)
 80002ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80002d2:	60d3      	str	r3, [r2, #12]

    GPIOB->AFR[0] |= (0x44 << (6 * 4)); // Set alternate function to I2C1 for PB6 and PB7
 80002d4:	4b0b      	ldr	r3, [pc, #44]	; (8000304 <GPIO_Config+0x70>)
 80002d6:	6a1b      	ldr	r3, [r3, #32]
 80002d8:	4a0a      	ldr	r2, [pc, #40]	; (8000304 <GPIO_Config+0x70>)
 80002da:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 80002de:	6213      	str	r3, [r2, #32]

    // Confifure PA6 as led output
    GPIOA->MODER &= ~(1 << 16);
 80002e0:	4b09      	ldr	r3, [pc, #36]	; (8000308 <GPIO_Config+0x74>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a08      	ldr	r2, [pc, #32]	; (8000308 <GPIO_Config+0x74>)
 80002e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002ea:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (1 << 16);
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <GPIO_Config+0x74>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a05      	ldr	r2, [pc, #20]	; (8000308 <GPIO_Config+0x74>)
 80002f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002f6:	6013      	str	r3, [r2, #0]
}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40020400 	.word	0x40020400
 8000308:	40020000 	.word	0x40020000

0800030c <I2C_Config>:


void I2C_Config(void) {
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
    I2C1->CR1 &= ~I2C_CR1_PE; // Disable I2C1
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <I2C_Config+0x50>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a11      	ldr	r2, [pc, #68]	; (800035c <I2C_Config+0x50>)
 8000316:	f023 0301 	bic.w	r3, r3, #1
 800031a:	6013      	str	r3, [r2, #0]
    I2C1->CR2 = 16;           // APB1 clock frequency in MHz (set to 16 MHz)
 800031c:	4b0f      	ldr	r3, [pc, #60]	; (800035c <I2C_Config+0x50>)
 800031e:	2210      	movs	r2, #16
 8000320:	605a      	str	r2, [r3, #4]
    I2C1->OAR1 = I2C_OAR1_OA1EN | (SLAVE_ADDR << 1); // Set slave address and enable it
 8000322:	4b0e      	ldr	r3, [pc, #56]	; (800035c <I2C_Config+0x50>)
 8000324:	f244 02d0 	movw	r2, #16592	; 0x40d0
 8000328:	609a      	str	r2, [r3, #8]
    //I2C1->OAR1 = (SLAVE_ADDR << 1); // Set slave address
    I2C1->CCR = 80;           // Configure clock control (standard mode, 100 kHz), consindering 16MHz system clock
 800032a:	4b0c      	ldr	r3, [pc, #48]	; (800035c <I2C_Config+0x50>)
 800032c:	2250      	movs	r2, #80	; 0x50
 800032e:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 17;         // Configure maximum rise time
 8000330:	4b0a      	ldr	r3, [pc, #40]	; (800035c <I2C_Config+0x50>)
 8000332:	2211      	movs	r2, #17
 8000334:	621a      	str	r2, [r3, #32]

    // Enable ACK, I2C peripheral, and interrupts
    I2C1->CR2 |= I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN | I2C_CR2_ITERREN;
 8000336:	4b09      	ldr	r3, [pc, #36]	; (800035c <I2C_Config+0x50>)
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	4a08      	ldr	r2, [pc, #32]	; (800035c <I2C_Config+0x50>)
 800033c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000340:	6053      	str	r3, [r2, #4]
    I2C1->CR1 |= (I2C_CR1_ACK | I2C_CR1_PE);
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <I2C_Config+0x50>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4a05      	ldr	r2, [pc, #20]	; (800035c <I2C_Config+0x50>)
 8000348:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	6013      	str	r3, [r2, #0]
}
 8000352:	bf00      	nop
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	40005400 	.word	0x40005400

08000360 <NVIC_EnableIRQ>:

void NVIC_EnableIRQ(uint8_t IRQNumber)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	71fb      	strb	r3, [r7, #7]
	if(IRQNumber <= 31)
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	2b1f      	cmp	r3, #31
 800036e:	d80a      	bhi.n	8000386 <NVIC_EnableIRQ+0x26>
	{
		// program ISER0 register
		*NVIC_ISER0 |= (1 << IRQNumber);
 8000370:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <NVIC_EnableIRQ+0x7c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	79fa      	ldrb	r2, [r7, #7]
 8000376:	2101      	movs	r1, #1
 8000378:	fa01 f202 	lsl.w	r2, r1, r2
 800037c:	4611      	mov	r1, r2
 800037e:	4a17      	ldr	r2, [pc, #92]	; (80003dc <NVIC_EnableIRQ+0x7c>)
 8000380:	430b      	orrs	r3, r1
 8000382:	6013      	str	r3, [r2, #0]
	{
		// program ISER2 register
		*NVIC_ISER2 |= (1 << (IRQNumber % 64));

	}
}
 8000384:	e024      	b.n	80003d0 <NVIC_EnableIRQ+0x70>
	}else if(IRQNumber > 31 && IRQNumber < 64) // 32 to 63
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	2b1f      	cmp	r3, #31
 800038a:	d90f      	bls.n	80003ac <NVIC_EnableIRQ+0x4c>
 800038c:	79fb      	ldrb	r3, [r7, #7]
 800038e:	2b3f      	cmp	r3, #63	; 0x3f
 8000390:	d80c      	bhi.n	80003ac <NVIC_EnableIRQ+0x4c>
		*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000392:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <NVIC_EnableIRQ+0x80>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	79fa      	ldrb	r2, [r7, #7]
 8000398:	f002 021f 	and.w	r2, r2, #31
 800039c:	2101      	movs	r1, #1
 800039e:	fa01 f202 	lsl.w	r2, r1, r2
 80003a2:	4611      	mov	r1, r2
 80003a4:	4a0e      	ldr	r2, [pc, #56]	; (80003e0 <NVIC_EnableIRQ+0x80>)
 80003a6:	430b      	orrs	r3, r1
 80003a8:	6013      	str	r3, [r2, #0]
}
 80003aa:	e011      	b.n	80003d0 <NVIC_EnableIRQ+0x70>
	}else if(IRQNumber >= 64 && IRQNumber < 96) // 64 to 95
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	2b3f      	cmp	r3, #63	; 0x3f
 80003b0:	d90e      	bls.n	80003d0 <NVIC_EnableIRQ+0x70>
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	2b5f      	cmp	r3, #95	; 0x5f
 80003b6:	d80b      	bhi.n	80003d0 <NVIC_EnableIRQ+0x70>
		*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 80003b8:	4b0a      	ldr	r3, [pc, #40]	; (80003e4 <NVIC_EnableIRQ+0x84>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	79fa      	ldrb	r2, [r7, #7]
 80003be:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80003c2:	2101      	movs	r1, #1
 80003c4:	fa01 f202 	lsl.w	r2, r1, r2
 80003c8:	4611      	mov	r1, r2
 80003ca:	4a06      	ldr	r2, [pc, #24]	; (80003e4 <NVIC_EnableIRQ+0x84>)
 80003cc:	430b      	orrs	r3, r1
 80003ce:	6013      	str	r3, [r2, #0]
}
 80003d0:	bf00      	nop
 80003d2:	370c      	adds	r7, #12
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000e100 	.word	0xe000e100
 80003e0:	e000e104 	.word	0xe000e104
 80003e4:	e000e108 	.word	0xe000e108

080003e8 <NVIC_Config>:

void NVIC_Config(void) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	// priority will be default
    NVIC_EnableIRQ(IRQ_NO_I2C1_EV); // Enable I2C1 event interrupt
 80003ec:	201f      	movs	r0, #31
 80003ee:	f7ff ffb7 	bl	8000360 <NVIC_EnableIRQ>
    NVIC_EnableIRQ(IRQ_NO_I2C1_ER); // Enable I2C1 error interrupt
 80003f2:	2020      	movs	r0, #32
 80003f4:	f7ff ffb4 	bl	8000360 <NVIC_EnableIRQ>
}
 80003f8:	bf00      	nop
 80003fa:	bd80      	pop	{r7, pc}

080003fc <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void) {
 80003fc:	b590      	push	{r4, r7, lr}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
    if ((I2C1->SR1 & I2C_SR1_ADDR) == I2C_SR1_ADDR) {
 8000402:	4b2e      	ldr	r3, [pc, #184]	; (80004bc <I2C1_EV_IRQHandler+0xc0>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	f003 0302 	and.w	r3, r3, #2
 800040a:	2b02      	cmp	r3, #2
 800040c:	d105      	bne.n	800041a <I2C1_EV_IRQHandler+0x1e>
        uint32_t temp = I2C1->SR1;
 800040e:	4b2b      	ldr	r3, [pc, #172]	; (80004bc <I2C1_EV_IRQHandler+0xc0>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	607b      	str	r3, [r7, #4]
        temp = I2C1->SR2; // Clear ADDR flag
 8000414:	4b29      	ldr	r3, [pc, #164]	; (80004bc <I2C1_EV_IRQHandler+0xc0>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	607b      	str	r3, [r7, #4]
        (void)temp;      // Prevent unused variable warning
    }

    if ((I2C1->SR1 & I2C_SR1_RXNE) == I2C_SR1_RXNE) {
 800041a:	4b28      	ldr	r3, [pc, #160]	; (80004bc <I2C1_EV_IRQHandler+0xc0>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000422:	2b40      	cmp	r3, #64	; 0x40
 8000424:	d104      	bne.n	8000430 <I2C1_EV_IRQHandler+0x34>
        active_command = I2C1->DR;
 8000426:	4b25      	ldr	r3, [pc, #148]	; (80004bc <I2C1_EV_IRQHandler+0xc0>)
 8000428:	691b      	ldr	r3, [r3, #16]
 800042a:	b2da      	uxtb	r2, r3
 800042c:	4b24      	ldr	r3, [pc, #144]	; (80004c0 <I2C1_EV_IRQHandler+0xc4>)
 800042e:	701a      	strb	r2, [r3, #0]
    }

    if ((I2C1->SR1 & I2C_SR1_TXE) == I2C_SR1_TXE) {
 8000430:	4b22      	ldr	r3, [pc, #136]	; (80004bc <I2C1_EV_IRQHandler+0xc0>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000438:	2b80      	cmp	r3, #128	; 0x80
 800043a:	d12c      	bne.n	8000496 <I2C1_EV_IRQHandler+0x9a>
        if (active_command == 0x51)
 800043c:	4b20      	ldr	r3, [pc, #128]	; (80004c0 <I2C1_EV_IRQHandler+0xc4>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b51      	cmp	r3, #81	; 0x51
 8000442:	d10a      	bne.n	800045a <I2C1_EV_IRQHandler+0x5e>
        {
            uint8_t len = get_len_of_data();
 8000444:	f7ff fece 	bl	80001e4 <get_len_of_data>
 8000448:	4603      	mov	r3, r0
 800044a:	70fb      	strb	r3, [r7, #3]
            I2C1->DR = len;
 800044c:	4a1b      	ldr	r2, [pc, #108]	; (80004bc <I2C1_EV_IRQHandler+0xc0>)
 800044e:	78fb      	ldrb	r3, [r7, #3]
 8000450:	6113      	str	r3, [r2, #16]
            active_command = 0xff;
 8000452:	4b1b      	ldr	r3, [pc, #108]	; (80004c0 <I2C1_EV_IRQHandler+0xc4>)
 8000454:	22ff      	movs	r2, #255	; 0xff
 8000456:	701a      	strb	r2, [r3, #0]
 8000458:	e01d      	b.n	8000496 <I2C1_EV_IRQHandler+0x9a>
        } else if (active_command == 0x52)
 800045a:	4b19      	ldr	r3, [pc, #100]	; (80004c0 <I2C1_EV_IRQHandler+0xc4>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	2b52      	cmp	r3, #82	; 0x52
 8000460:	d119      	bne.n	8000496 <I2C1_EV_IRQHandler+0x9a>
        {
            static uint8_t index = 0;
            I2C1->DR = name_msg[index++];
 8000462:	4b18      	ldr	r3, [pc, #96]	; (80004c4 <I2C1_EV_IRQHandler+0xc8>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	1c5a      	adds	r2, r3, #1
 8000468:	b2d1      	uxtb	r1, r2
 800046a:	4a16      	ldr	r2, [pc, #88]	; (80004c4 <I2C1_EV_IRQHandler+0xc8>)
 800046c:	7011      	strb	r1, [r2, #0]
 800046e:	461a      	mov	r2, r3
 8000470:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <I2C1_EV_IRQHandler+0xcc>)
 8000472:	5c9a      	ldrb	r2, [r3, r2]
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <I2C1_EV_IRQHandler+0xc0>)
 8000476:	611a      	str	r2, [r3, #16]
            if (index >= strlen(name_msg))
 8000478:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <I2C1_EV_IRQHandler+0xc8>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	461c      	mov	r4, r3
 800047e:	4812      	ldr	r0, [pc, #72]	; (80004c8 <I2C1_EV_IRQHandler+0xcc>)
 8000480:	f7ff fea8 	bl	80001d4 <strlen>
 8000484:	4603      	mov	r3, r0
 8000486:	429c      	cmp	r4, r3
 8000488:	d305      	bcc.n	8000496 <I2C1_EV_IRQHandler+0x9a>
            {
                index = 0;
 800048a:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <I2C1_EV_IRQHandler+0xc8>)
 800048c:	2200      	movs	r2, #0
 800048e:	701a      	strb	r2, [r3, #0]
                active_command = 0xff;
 8000490:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <I2C1_EV_IRQHandler+0xc4>)
 8000492:	22ff      	movs	r2, #255	; 0xff
 8000494:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // Handle STOP condition (optional but recommended)
	if (I2C1->SR1 & I2C_SR1_STOPF){
 8000496:	4b09      	ldr	r3, [pc, #36]	; (80004bc <I2C1_EV_IRQHandler+0xc0>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f003 0310 	and.w	r3, r3, #16
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d007      	beq.n	80004b2 <I2C1_EV_IRQHandler+0xb6>
		(void)I2C1->SR1; // Just read SR1 to clear the STOPF flag
 80004a2:	4b06      	ldr	r3, [pc, #24]	; (80004bc <I2C1_EV_IRQHandler+0xc0>)
 80004a4:	695b      	ldr	r3, [r3, #20]
		I2C1->CR1 |=  I2C_CR1_STOP; // release SDA and SCL lines
 80004a6:	4b05      	ldr	r3, [pc, #20]	; (80004bc <I2C1_EV_IRQHandler+0xc0>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a04      	ldr	r2, [pc, #16]	; (80004bc <I2C1_EV_IRQHandler+0xc0>)
 80004ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004b0:	6013      	str	r3, [r2, #0]

		//active_command = 0;  // Reset command/state
	}


}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd90      	pop	{r4, r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40005400 	.word	0x40005400
 80004c0:	20000020 	.word	0x20000020
 80004c4:	20000040 	.word	0x20000040
 80004c8:	20000000 	.word	0x20000000

080004cc <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void) {
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0

    if ((I2C1->SR1 & I2C_SR1_AF) == I2C_SR1_AF) {
 80004d0:	4b15      	ldr	r3, [pc, #84]	; (8000528 <I2C1_ER_IRQHandler+0x5c>)
 80004d2:	695b      	ldr	r3, [r3, #20]
 80004d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004dc:	d105      	bne.n	80004ea <I2C1_ER_IRQHandler+0x1e>
        I2C1->SR1 &= ~I2C_SR1_AF; // Clear acknowledge failure flag
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <I2C1_ER_IRQHandler+0x5c>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a11      	ldr	r2, [pc, #68]	; (8000528 <I2C1_ER_IRQHandler+0x5c>)
 80004e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80004e8:	6153      	str	r3, [r2, #20]
    }


    if ((I2C1->SR1 & I2C_SR1_OVR) == I2C_SR1_OVR) {
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <I2C1_ER_IRQHandler+0x5c>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80004f6:	d105      	bne.n	8000504 <I2C1_ER_IRQHandler+0x38>
        I2C1->SR1 &= ~I2C_SR1_OVR; // Clear overrun/underrun flag
 80004f8:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <I2C1_ER_IRQHandler+0x5c>)
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	4a0a      	ldr	r2, [pc, #40]	; (8000528 <I2C1_ER_IRQHandler+0x5c>)
 80004fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000502:	6153      	str	r3, [r2, #20]
    }

    if ((I2C1->SR1 & I2C_SR1_BERR) == I2C_SR1_BERR) {
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <I2C1_ER_IRQHandler+0x5c>)
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800050c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000510:	d105      	bne.n	800051e <I2C1_ER_IRQHandler+0x52>
        I2C1->SR1 &= ~I2C_SR1_BERR; // Clear bus error flag
 8000512:	4b05      	ldr	r3, [pc, #20]	; (8000528 <I2C1_ER_IRQHandler+0x5c>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	4a04      	ldr	r2, [pc, #16]	; (8000528 <I2C1_ER_IRQHandler+0x5c>)
 8000518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800051c:	6153      	str	r3, [r2, #20]
    }
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	40005400 	.word	0x40005400

0800052c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800052c:	480d      	ldr	r0, [pc, #52]	; (8000564 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800052e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000530:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000534:	480c      	ldr	r0, [pc, #48]	; (8000568 <LoopForever+0x6>)
  ldr r1, =_edata
 8000536:	490d      	ldr	r1, [pc, #52]	; (800056c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000538:	4a0d      	ldr	r2, [pc, #52]	; (8000570 <LoopForever+0xe>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800053c:	e002      	b.n	8000544 <LoopCopyDataInit>

0800053e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000542:	3304      	adds	r3, #4

08000544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000548:	d3f9      	bcc.n	800053e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054a:	4a0a      	ldr	r2, [pc, #40]	; (8000574 <LoopForever+0x12>)
  ldr r4, =_ebss
 800054c:	4c0a      	ldr	r4, [pc, #40]	; (8000578 <LoopForever+0x16>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000550:	e001      	b.n	8000556 <LoopFillZerobss>

08000552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000554:	3204      	adds	r2, #4

08000556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000558:	d3fb      	bcc.n	8000552 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800055a:	f000 f811 	bl	8000580 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800055e:	f7ff fe4d 	bl	80001fc <main>

08000562 <LoopForever>:

LoopForever:
  b LoopForever
 8000562:	e7fe      	b.n	8000562 <LoopForever>
  ldr   r0, =_estack
 8000564:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800056c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000570:	080005e8 	.word	0x080005e8
  ldr r2, =_sbss
 8000574:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000578:	20000044 	.word	0x20000044

0800057c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800057c:	e7fe      	b.n	800057c <ADC_IRQHandler>
	...

08000580 <__libc_init_array>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	4d0d      	ldr	r5, [pc, #52]	; (80005b8 <__libc_init_array+0x38>)
 8000584:	4c0d      	ldr	r4, [pc, #52]	; (80005bc <__libc_init_array+0x3c>)
 8000586:	1b64      	subs	r4, r4, r5
 8000588:	10a4      	asrs	r4, r4, #2
 800058a:	2600      	movs	r6, #0
 800058c:	42a6      	cmp	r6, r4
 800058e:	d109      	bne.n	80005a4 <__libc_init_array+0x24>
 8000590:	4d0b      	ldr	r5, [pc, #44]	; (80005c0 <__libc_init_array+0x40>)
 8000592:	4c0c      	ldr	r4, [pc, #48]	; (80005c4 <__libc_init_array+0x44>)
 8000594:	f000 f818 	bl	80005c8 <_init>
 8000598:	1b64      	subs	r4, r4, r5
 800059a:	10a4      	asrs	r4, r4, #2
 800059c:	2600      	movs	r6, #0
 800059e:	42a6      	cmp	r6, r4
 80005a0:	d105      	bne.n	80005ae <__libc_init_array+0x2e>
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80005a8:	4798      	blx	r3
 80005aa:	3601      	adds	r6, #1
 80005ac:	e7ee      	b.n	800058c <__libc_init_array+0xc>
 80005ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80005b2:	4798      	blx	r3
 80005b4:	3601      	adds	r6, #1
 80005b6:	e7f2      	b.n	800059e <__libc_init_array+0x1e>
 80005b8:	080005e0 	.word	0x080005e0
 80005bc:	080005e0 	.word	0x080005e0
 80005c0:	080005e0 	.word	0x080005e0
 80005c4:	080005e4 	.word	0x080005e4

080005c8 <_init>:
 80005c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ca:	bf00      	nop
 80005cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ce:	bc08      	pop	{r3}
 80005d0:	469e      	mov	lr, r3
 80005d2:	4770      	bx	lr

080005d4 <_fini>:
 80005d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d6:	bf00      	nop
 80005d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005da:	bc08      	pop	{r3}
 80005dc:	469e      	mov	lr, r3
 80005de:	4770      	bx	lr
