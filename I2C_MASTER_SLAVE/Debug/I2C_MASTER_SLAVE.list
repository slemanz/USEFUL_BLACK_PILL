
I2C_MASTER_SLAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002ac  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000440  08000448  00010448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000440  08000440  00010448  2**0
                  CONTENTS
  4 .ARM          00000000  08000440  08000440  00010448  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000440  08000448  00010448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000440  08000440  00010440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000444  08000444  00010444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000448  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000448  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010448  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010478  2**0
                  CONTENTS, READONLY
 13 .debug_info   000004f2  00000000  00000000  000104bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000160  00000000  00000000  000109ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000070  00000000  00000000  00010b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000004a  00000000  00000000  00010b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001a46  00000000  00000000  00010bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000651  00000000  00000000  00012610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00007498  00000000  00000000  00012c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000fc  00000000  00000000  0001a0fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0001a1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000428 	.word	0x08000428

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000428 	.word	0x08000428

080001d4 <delay>:
uint8_t get_len_of_data(void) {
    return (uint8_t)strlen(name_msg);
}

void delay(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 1000000; i++);
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e002      	b.n	80001e6 <delay+0x12>
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3301      	adds	r3, #1
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4a04      	ldr	r2, [pc, #16]	; (80001fc <delay+0x28>)
 80001ea:	4293      	cmp	r3, r2
 80001ec:	d9f8      	bls.n	80001e0 <delay+0xc>
}
 80001ee:	bf00      	nop
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr
 80001fc:	000f423f 	.word	0x000f423f

08000200 <main>:


int main(void) {
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
    Clock_Config();
 8000204:	f000 f822 	bl	800024c <Clock_Config>
    GPIO_Config();
 8000208:	f000 f85a 	bl	80002c0 <GPIO_Config>
    I2C_Config();
 800020c:	f000 f894 	bl	8000338 <I2C_Config>
    //NVIC_Config();

    // blink led to say that config is OKAY
    LED = 1;
 8000210:	4a0d      	ldr	r2, [pc, #52]	; (8000248 <main+0x48>)
 8000212:	6813      	ldr	r3, [r2, #0]
 8000214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000218:	6013      	str	r3, [r2, #0]
	delay();
 800021a:	f7ff ffdb 	bl	80001d4 <delay>
	LED = 0;
 800021e:	4a0a      	ldr	r2, [pc, #40]	; (8000248 <main+0x48>)
 8000220:	6813      	ldr	r3, [r2, #0]
 8000222:	f36f 2308 	bfc	r3, #8, #1
 8000226:	6013      	str	r3, [r2, #0]
	delay();
 8000228:	f7ff ffd4 	bl	80001d4 <delay>
	 LED = 1;
 800022c:	4a06      	ldr	r2, [pc, #24]	; (8000248 <main+0x48>)
 800022e:	6813      	ldr	r3, [r2, #0]
 8000230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000234:	6013      	str	r3, [r2, #0]
	delay();
 8000236:	f7ff ffcd 	bl	80001d4 <delay>
	LED = 0;
 800023a:	4a03      	ldr	r2, [pc, #12]	; (8000248 <main+0x48>)
 800023c:	6813      	ldr	r3, [r2, #0]
 800023e:	f36f 2308 	bfc	r3, #8, #1
 8000242:	6013      	str	r3, [r2, #0]



    while (1)
 8000244:	e7fe      	b.n	8000244 <main+0x44>
 8000246:	bf00      	nop
 8000248:	40020014 	.word	0x40020014

0800024c <Clock_Config>:
 * FUNCTIONS
 */



void Clock_Config(void) {
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
    // Enable HSI (internal high speed clock)
    RCC->CR |= RCC_CR_HSION;
 8000250:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <Clock_Config+0x70>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a19      	ldr	r2, [pc, #100]	; (80002bc <Clock_Config+0x70>)
 8000256:	f043 0301 	orr.w	r3, r3, #1
 800025a:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSIRDY)); // Wait for HSI to be ready
 800025c:	bf00      	nop
 800025e:	4b17      	ldr	r3, [pc, #92]	; (80002bc <Clock_Config+0x70>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f003 0302 	and.w	r3, r3, #2
 8000266:	2b00      	cmp	r3, #0
 8000268:	d0f9      	beq.n	800025e <Clock_Config+0x12>

    // Select HSI as system clock source
    RCC->CFGR &= ~RCC_CFGR_SW; // clear
 800026a:	4b14      	ldr	r3, [pc, #80]	; (80002bc <Clock_Config+0x70>)
 800026c:	689b      	ldr	r3, [r3, #8]
 800026e:	4a13      	ldr	r2, [pc, #76]	; (80002bc <Clock_Config+0x70>)
 8000270:	f023 0303 	bic.w	r3, r3, #3
 8000274:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_HSI; // set
 8000276:	4b11      	ldr	r3, [pc, #68]	; (80002bc <Clock_Config+0x70>)
 8000278:	4a10      	ldr	r2, [pc, #64]	; (80002bc <Clock_Config+0x70>)
 800027a:	689b      	ldr	r3, [r3, #8]
 800027c:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI); // Wait till HSI is used as system clock source
 800027e:	bf00      	nop
 8000280:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <Clock_Config+0x70>)
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	f003 030c 	and.w	r3, r3, #12
 8000288:	2b00      	cmp	r3, #0
 800028a:	d1f9      	bne.n	8000280 <Clock_Config+0x34>

    // Enable clocks for GPIOB and I2C1
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800028c:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <Clock_Config+0x70>)
 800028e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000290:	4a0a      	ldr	r2, [pc, #40]	; (80002bc <Clock_Config+0x70>)
 8000292:	f043 0301 	orr.w	r3, r3, #1
 8000296:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <Clock_Config+0x70>)
 800029a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029c:	4a07      	ldr	r2, [pc, #28]	; (80002bc <Clock_Config+0x70>)
 800029e:	f043 0302 	orr.w	r3, r3, #2
 80002a2:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80002a4:	4b05      	ldr	r3, [pc, #20]	; (80002bc <Clock_Config+0x70>)
 80002a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002a8:	4a04      	ldr	r2, [pc, #16]	; (80002bc <Clock_Config+0x70>)
 80002aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002ae:	6413      	str	r3, [r2, #64]	; 0x40
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40023800 	.word	0x40023800

080002c0 <GPIO_Config>:


void GPIO_Config(void) {
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
    // Configure PB6 and PB7 as alternate function I2C1
    GPIOB->MODER &= ~(0xF << (6 * 2)); // Clear mode for PB6 and PB7
 80002c4:	4b1a      	ldr	r3, [pc, #104]	; (8000330 <GPIO_Config+0x70>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a19      	ldr	r2, [pc, #100]	; (8000330 <GPIO_Config+0x70>)
 80002ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80002ce:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (0xA << (6 * 2));  // Set PB6 and PB7 to alternate function
 80002d0:	4b17      	ldr	r3, [pc, #92]	; (8000330 <GPIO_Config+0x70>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a16      	ldr	r2, [pc, #88]	; (8000330 <GPIO_Config+0x70>)
 80002d6:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 80002da:	6013      	str	r3, [r2, #0]

    GPIOB->OTYPER |= (0x3 << 6);       // Set output type to open-drain for PB6 and PB7
 80002dc:	4b14      	ldr	r3, [pc, #80]	; (8000330 <GPIO_Config+0x70>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	4a13      	ldr	r2, [pc, #76]	; (8000330 <GPIO_Config+0x70>)
 80002e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80002e6:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (0xF << (6 * 2));// Set speed to very high for PB6 and PB7
 80002e8:	4b11      	ldr	r3, [pc, #68]	; (8000330 <GPIO_Config+0x70>)
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	4a10      	ldr	r2, [pc, #64]	; (8000330 <GPIO_Config+0x70>)
 80002ee:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80002f2:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(0xF << (6 * 2)); // No pull-up/pull-down for PB6 and PB7
 80002f4:	4b0e      	ldr	r3, [pc, #56]	; (8000330 <GPIO_Config+0x70>)
 80002f6:	68db      	ldr	r3, [r3, #12]
 80002f8:	4a0d      	ldr	r2, [pc, #52]	; (8000330 <GPIO_Config+0x70>)
 80002fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80002fe:	60d3      	str	r3, [r2, #12]

    GPIOB->AFR[0] |= (0x44 << (6 * 4)); // Set alternate function to I2C1 for PB6 and PB7
 8000300:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <GPIO_Config+0x70>)
 8000302:	6a1b      	ldr	r3, [r3, #32]
 8000304:	4a0a      	ldr	r2, [pc, #40]	; (8000330 <GPIO_Config+0x70>)
 8000306:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 800030a:	6213      	str	r3, [r2, #32]

    // Confifure PA6 as led output
    GPIOA->MODER &= ~(1 << 16);
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <GPIO_Config+0x74>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a08      	ldr	r2, [pc, #32]	; (8000334 <GPIO_Config+0x74>)
 8000312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000316:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (1 << 16);
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <GPIO_Config+0x74>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a05      	ldr	r2, [pc, #20]	; (8000334 <GPIO_Config+0x74>)
 800031e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000322:	6013      	str	r3, [r2, #0]
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40020400 	.word	0x40020400
 8000334:	40020000 	.word	0x40020000

08000338 <I2C_Config>:


void I2C_Config(void) {
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
    I2C1->CR1 &= ~I2C_CR1_PE; // Disable I2C1
 800033c:	4b12      	ldr	r3, [pc, #72]	; (8000388 <I2C_Config+0x50>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a11      	ldr	r2, [pc, #68]	; (8000388 <I2C_Config+0x50>)
 8000342:	f023 0301 	bic.w	r3, r3, #1
 8000346:	6013      	str	r3, [r2, #0]
    I2C1->CR2 = 16;           // APB1 clock frequency in MHz (set to 16 MHz)
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <I2C_Config+0x50>)
 800034a:	2210      	movs	r2, #16
 800034c:	605a      	str	r2, [r3, #4]
    //I2C1->OAR1 = I2C_OAR1_OA1EN | (SLAVE_ADDR << 1); // Set slave address and enable it
    I2C1->OAR1 = (SLAVE_ADDR << 1); // Set slave address
 800034e:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <I2C_Config+0x50>)
 8000350:	22d0      	movs	r2, #208	; 0xd0
 8000352:	609a      	str	r2, [r3, #8]
    I2C1->CCR = 80;           // Configure clock control (standard mode, 100 kHz), consindering 16MHz system clock
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <I2C_Config+0x50>)
 8000356:	2250      	movs	r2, #80	; 0x50
 8000358:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 17;         // Configure maximum rise time
 800035a:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <I2C_Config+0x50>)
 800035c:	2211      	movs	r2, #17
 800035e:	621a      	str	r2, [r3, #32]

    // Enable ACK, I2C peripheral, and interrupts
    I2C1->CR1 |= I2C_CR1_ACK | I2C_CR1_PE;
 8000360:	4b09      	ldr	r3, [pc, #36]	; (8000388 <I2C_Config+0x50>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a08      	ldr	r2, [pc, #32]	; (8000388 <I2C_Config+0x50>)
 8000366:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800036a:	f043 0301 	orr.w	r3, r3, #1
 800036e:	6013      	str	r3, [r2, #0]
    I2C1->CR2 |= I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN | I2C_CR2_ITERREN;
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <I2C_Config+0x50>)
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	4a04      	ldr	r2, [pc, #16]	; (8000388 <I2C_Config+0x50>)
 8000376:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800037a:	6053      	str	r3, [r2, #4]
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	40005400 	.word	0x40005400

0800038c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800038c:	480d      	ldr	r0, [pc, #52]	; (80003c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800038e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000390:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000394:	480c      	ldr	r0, [pc, #48]	; (80003c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000396:	490d      	ldr	r1, [pc, #52]	; (80003cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000398:	4a0d      	ldr	r2, [pc, #52]	; (80003d0 <LoopForever+0xe>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800039c:	e002      	b.n	80003a4 <LoopCopyDataInit>

0800039e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a2:	3304      	adds	r3, #4

080003a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a8:	d3f9      	bcc.n	800039e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003aa:	4a0a      	ldr	r2, [pc, #40]	; (80003d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003ac:	4c0a      	ldr	r4, [pc, #40]	; (80003d8 <LoopForever+0x16>)
  movs r3, #0
 80003ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b0:	e001      	b.n	80003b6 <LoopFillZerobss>

080003b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b4:	3204      	adds	r2, #4

080003b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b8:	d3fb      	bcc.n	80003b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ba:	f000 f811 	bl	80003e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003be:	f7ff ff1f 	bl	8000200 <main>

080003c2 <LoopForever>:

LoopForever:
  b LoopForever
 80003c2:	e7fe      	b.n	80003c2 <LoopForever>
  ldr   r0, =_estack
 80003c4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80003c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003cc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003d0:	08000448 	.word	0x08000448
  ldr r2, =_sbss
 80003d4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003d8:	2000001c 	.word	0x2000001c

080003dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003dc:	e7fe      	b.n	80003dc <ADC_IRQHandler>
	...

080003e0 <__libc_init_array>:
 80003e0:	b570      	push	{r4, r5, r6, lr}
 80003e2:	4d0d      	ldr	r5, [pc, #52]	; (8000418 <__libc_init_array+0x38>)
 80003e4:	4c0d      	ldr	r4, [pc, #52]	; (800041c <__libc_init_array+0x3c>)
 80003e6:	1b64      	subs	r4, r4, r5
 80003e8:	10a4      	asrs	r4, r4, #2
 80003ea:	2600      	movs	r6, #0
 80003ec:	42a6      	cmp	r6, r4
 80003ee:	d109      	bne.n	8000404 <__libc_init_array+0x24>
 80003f0:	4d0b      	ldr	r5, [pc, #44]	; (8000420 <__libc_init_array+0x40>)
 80003f2:	4c0c      	ldr	r4, [pc, #48]	; (8000424 <__libc_init_array+0x44>)
 80003f4:	f000 f818 	bl	8000428 <_init>
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	10a4      	asrs	r4, r4, #2
 80003fc:	2600      	movs	r6, #0
 80003fe:	42a6      	cmp	r6, r4
 8000400:	d105      	bne.n	800040e <__libc_init_array+0x2e>
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f855 3b04 	ldr.w	r3, [r5], #4
 8000408:	4798      	blx	r3
 800040a:	3601      	adds	r6, #1
 800040c:	e7ee      	b.n	80003ec <__libc_init_array+0xc>
 800040e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000412:	4798      	blx	r3
 8000414:	3601      	adds	r6, #1
 8000416:	e7f2      	b.n	80003fe <__libc_init_array+0x1e>
 8000418:	08000440 	.word	0x08000440
 800041c:	08000440 	.word	0x08000440
 8000420:	08000440 	.word	0x08000440
 8000424:	08000444 	.word	0x08000444

08000428 <_init>:
 8000428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042a:	bf00      	nop
 800042c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042e:	bc08      	pop	{r3}
 8000430:	469e      	mov	lr, r3
 8000432:	4770      	bx	lr

08000434 <_fini>:
 8000434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000436:	bf00      	nop
 8000438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043a:	bc08      	pop	{r3}
 800043c:	469e      	mov	lr, r3
 800043e:	4770      	bx	lr
